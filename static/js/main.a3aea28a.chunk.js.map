{"version":3,"sources":["components/App.tsx","assets/audio-beep-sound.mp3","components/Alarm.tsx","components/CounterSetter.tsx","components/PausePlayButton.tsx","components/ResetButton.tsx","components/Timer.tsx","assets/mini-tomato.svg","components/Title.tsx","reportWebVitals.js","serviceWorkerRegistration.ts","components/ServiceWorkerWrapper.tsx","components/ScreenWakeLocker.tsx","index.tsx"],"names":["TimerMode","Alarm","audioRef","id","ref","src","AudioBeepSound","CounterSetter","name","value","onUpdate","className","onClick","PausePlayButton","handler","ResetButton","Timer","paused","minutes","Seconds","seconds","toString","padStart","Minutes","Title","title","minitomato","height","alt","App","initialState","activeTimer","mode","Session","breakLength","sessionLength","React","updateActiveTimer","newAudioRef","updateBreakLength","updateSessionLength","pauseForTest","a","setTimeout","timer","console","log","newMin","newSec","playAudio","toggleTimerMode","Break","toggleMinutes","updateTimerFunction","clearTimeout","loadedAudio","current","loop","play","alert","stopAudio","pause","currentTime","toggle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onSuccess","error","ServiceWorkerWrapper","useState","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","reloadPage","postMessage","type","addToast","useToasts","useEffect","serviceWorkerRegistration","role","aria-live","aria-atomic","data-dismiss","aria-label","aria-hidden","appearance","autoDismiss","ScreenWakelocker","alertToast","message","released","isSupported","release","request","res","useWakeLock","onError","onRelease","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3aea28a.chunk.js","sourcesContent":["import * as React from \"react\";\r\n// import useScript from \"../hooks/useScript\";\r\nimport Alarm from \"./Alarm\";\r\nimport \"./App.css\";\r\nimport CounterSetter from \"./CounterSetter\";\r\nimport PausePlayButton from \"./PausePlayButton\";\r\nimport ResetButton from \"./ResetButton\";\r\nimport Timer from \"./Timer\";\r\nimport Title from \"./Title\";\r\n\r\nenum TimerMode {\r\n  Session,\r\n  Break,\r\n}\r\n\r\nconst App: React.FC = (): JSX.Element => {\r\n  // useScript(\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\");\r\n  //use local state\r\n  const initialState = {\r\n    activeTimer: {\r\n      mode: TimerMode.Session,\r\n      paused: true,\r\n      minutes: 25,\r\n      seconds: 0,\r\n    },\r\n    breakLength: 5,\r\n    sessionLength: 25,\r\n    // alarm: { active: false, started: false },\r\n  };\r\n\r\n  //   const everySecondFunction = () => {\r\n  //     console.log(\"piep\");\r\n  //   };\r\n\r\n  const [activeTimer, updateActiveTimer] = React.useState(\r\n    initialState.activeTimer\r\n  );\r\n\r\n  const newAudioRef: React.RefObject<HTMLAudioElement> = React.createRef();\r\n  const [audioRef, updateAudioRef] = React.useState(newAudioRef);\r\n\r\n  const [breakLength, updateBreakLength] = React.useState(\r\n    initialState.breakLength\r\n  );\r\n\r\n  const [sessionLength, updateSessionLength] = React.useState(\r\n    initialState.sessionLength\r\n  );\r\n\r\n  //   const [alarm, updateAlarm] = React.useState(initialState.alarm);\r\n\r\n  const resetHandler = () => {\r\n    updateSessionLength(initialState.sessionLength);\r\n    updateBreakLength(initialState.breakLength);\r\n    updateActiveTimer({\r\n      paused: true,\r\n      mode: TimerMode.Session,\r\n      minutes: initialState.sessionLength,\r\n      seconds: 0,\r\n    });\r\n    stopAudio();\r\n  };\r\n\r\n  const pausePlayHandler = () => {\r\n    const toggle = activeTimer.paused ? false : true;\r\n    updateActiveTimer({ ...activeTimer, paused: toggle });\r\n    stopAudio();\r\n  };\r\n\r\n  const handlerBreakLength = (value: number) => {\r\n    if (value < 1 || value > 60) return;\r\n    updateBreakLength(value);\r\n    if (activeTimer.paused && activeTimer.mode === TimerMode.Break)\r\n      updateActiveTimer({ ...activeTimer, minutes: value, seconds: 0 });\r\n  };\r\n\r\n  const handlerSessionLength = (value: number) => {\r\n    if (value < 1 || value > 60) return;\r\n    updateSessionLength(value);\r\n    if (activeTimer.paused && activeTimer.mode === TimerMode.Session)\r\n      updateActiveTimer({ ...activeTimer, minutes: value, seconds: 0 });\r\n  };\r\n\r\n  const updateTimerFunction = () => {\r\n    if (activeTimer.paused) {\r\n      console.log(\"paused\");\r\n    } else {\r\n      console.log(\"not paused\");\r\n      const newMin =\r\n        activeTimer.seconds === 0\r\n          ? activeTimer.minutes - 1\r\n          : activeTimer.minutes;\r\n      const newSec = activeTimer.seconds === 0 ? 59 : activeTimer.seconds - 1;\r\n      updateActiveTimer({ ...activeTimer, minutes: newMin, seconds: newSec });\r\n    }\r\n    if (activeTimer.seconds <= 0 && activeTimer.minutes <= 0) {\r\n      //   updateAlarm({ active: true, started: false });\r\n      updateActiveTimer({ ...activeTimer, paused: true });\r\n      try {\r\n        playAudio();\r\n      } finally {\r\n        try {\r\n          pauseForTest();\r\n        } finally {\r\n          const toggleTimerMode =\r\n            activeTimer.mode === TimerMode.Session\r\n              ? TimerMode.Break\r\n              : TimerMode.Session;\r\n          const toggleMinutes =\r\n            toggleTimerMode === TimerMode.Break ? breakLength : sessionLength;\r\n\r\n          updateActiveTimer({\r\n            ...activeTimer,\r\n            minutes: toggleMinutes,\r\n            seconds: 0,\r\n            mode: toggleTimerMode,\r\n            paused: false,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const pauseForTest = async () => {\r\n    setTimeout(() => {\r\n      return \"succes\";\r\n    }, 60000);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      updateTimerFunction();\r\n    }, 1000);\r\n    // Clear timeout if the component is unmounted\r\n    return () => clearTimeout(timer);\r\n  });\r\n\r\n  // use effect to run on startup\r\n  //   React.useEffect(() => {\r\n\r\n  //}, []);\r\n  //acces local state\r\n  // blabla = myStateVar\r\n  //change local state\r\n  //setState(888)\r\n  //read state from redux store\r\n  //const somereduxstoreslice = useAppSelector((state) => state.somereduxstoreslice);\r\n  //write to redux store\r\n  //const dispatch = useAppDispatch();\r\n  //dispatch(update({ textcontent: e.currentTarget.value }));\r\n  //   const updateTimer = (min: number, sec: number) => {\r\n  //     updateActiveTimer({ ...activeTimer, minutes: min, seconds: sec });\r\n  //   };\r\n  //   const handleAlarmEnd = () => {\r\n  //     updateAlarm({ active: false, started: false });\r\n  //   };\r\n\r\n  //   const handleAlarmStart = () => {\r\n  //     updateAlarm({ ...alarm, started: true });\r\n  //   };\r\n\r\n  const playAudio = async () => {\r\n    const loadedAudio = audioRef.current;\r\n    if (loadedAudio) {\r\n      loadedAudio.loop = false;\r\n      //loadedAudio.addEventListener(\"ended\", handleAlarmEnd);\r\n      try {\r\n        loadedAudio.play();\r\n      } catch (Err) {\r\n        alert(\"audio broken\");\r\n      } finally {\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const stopAudio = () => {\r\n    const loadedAudio = audioRef.current;\r\n    if (loadedAudio) {\r\n      loadedAudio.pause();\r\n      loadedAudio.currentTime = 0;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row-center\">\r\n        <Title title=\"My Pomodoro\" />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-3 offset-3\">\r\n          <CounterSetter\r\n            name=\"break\"\r\n            value={breakLength}\r\n            onUpdate={handlerBreakLength}\r\n          />\r\n        </div>\r\n        <div className=\"col-3\">\r\n          <CounterSetter\r\n            name=\"session\"\r\n            value={sessionLength}\r\n            onUpdate={handlerSessionLength}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"row-center w-40 mt-1\">\r\n        <div className=\"col-6 offset-3\">\r\n          <Timer\r\n            paused={activeTimer.paused}\r\n            name={activeTimer.mode === TimerMode.Session ? \"Session\" : \"Break\"}\r\n            minutes={activeTimer.minutes}\r\n            seconds={activeTimer.seconds}\r\n          />\r\n        </div>\r\n        <Alarm\r\n          audioRef={audioRef}\r\n          //   active={alarm.active}\r\n          //   handleEnd={handleAlarmEnd}\r\n          //   handleStart={handleAlarmStart}\r\n        />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-3 offset-3 mt-1\">\r\n          <PausePlayButton handler={pausePlayHandler} />\r\n        </div>\r\n        <div className=\"col-3 mt-1\">\r\n          <ResetButton handler={resetHandler} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/audio-beep-sound.176f94bd.mp3\";","import * as React from \"react\";\r\nimport \"./Alarm.css\";\r\nimport AudioBeepSound from \"../assets/audio-beep-sound.mp3\";\r\n\r\ntype IAlarmProps = {\r\n  audioRef: React.RefObject<HTMLAudioElement>;\r\n  //use handeler function if desired\r\n};\r\n\r\nconst Alarm: React.FC<IAlarmProps> = ({ audioRef }) => {\r\n  return <audio id=\"beep\" ref={audioRef} src={AudioBeepSound} />;\r\n};\r\n\r\n// type IAlarmProps = {\r\n//   active: boolean;\r\n//   handleEnd(): void;\r\n//   handleStart(): void;\r\n//   //use handeler function if desired\r\n// };\r\n\r\n// const Alarm: React.FC<IAlarmProps> = ({ active, handleEnd, handleStart }) => {\r\n//   const audioRef: React.RefObject<HTMLAudioElement> = React.createRef();\r\n//   const playAudio = () => {\r\n//     const loadedAudio = audioRef.current;\r\n//     if (active && loadedAudio) {\r\n//       loadedAudio.loop = false;\r\n//       loadedAudio.addEventListener(\"ended\", handleEnd);\r\n//       try {\r\n//         loadedAudio.play();\r\n//       } catch (Err) {\r\n//         alert(\"audio broken\");\r\n//       } finally {\r\n//         return;\r\n//       }\r\n//     } else if (loadedAudio) {\r\n//       loadedAudio.pause();\r\n//     }\r\n//   };\r\n//   React.useEffect(() => playAudio());\r\n//   return (\r\n//     <audio\r\n//       id=\"beep\"\r\n//       ref={audioRef}\r\n//       src={process.env.PUBLIC_URL + \"./AudioBeepSound.wav\"}\r\n//     />\r\n//   );\r\n// };\r\n\r\nexport default Alarm;\r\n","import * as React from \"react\";\r\nimport \"./CounterSetter.css\";\r\n//use reducer tools\r\n\r\ntype ICounterSetterProps = {\r\n  name: string;\r\n  value: number;\r\n  onUpdate(val: number): void;\r\n};\r\nconst CounterSetter: React.FC<ICounterSetterProps> = ({\r\n  name,\r\n  value,\r\n  onUpdate,\r\n}) => {\r\n  return (\r\n    <div className=\"row\">\r\n      <div id={`${name}-label`} className=\"col-10 offset-1\">\r\n        {name} length\r\n      </div>\r\n      <button\r\n        id={`${name}-increment`}\r\n        className=\"col-10 offset-1 bi bi-arrow-up-square-fill\"\r\n        onClick={() => onUpdate(value + 1)}\r\n      />\r\n      <h2 id={`${name}-length`} className=\"col-10 offset-1 text-center\">\r\n        {value}\r\n      </h2>\r\n      <button\r\n        id={`${name}-decrement`}\r\n        className=\"col-10 offset-1 bi bi-arrow-down-square-fill\"\r\n        onClick={() => onUpdate(value - 1)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default CounterSetter;\r\n","import * as React from \"react\";\r\nimport \"./PausePlayButton.css\";\r\n//use reducer tools\r\n\r\ntype IPausePlayButtonProps = {\r\n  //use handeler function if desired\r\n  handler(): void;\r\n};\r\nconst PausePlayButton: React.FC<IPausePlayButtonProps> = ({ handler }) => {\r\n  return (\r\n    <button id=\"start_stop\" className=\"col-12\" onClick={handler}>\r\n      <i className=\"bi bi-play-circle-fill\" />\r\n      <i className=\"bi bi-pause-circle-fill\" />\r\n    </button>\r\n  );\r\n};\r\nexport default PausePlayButton;\r\n","import * as React from \"react\";\r\nimport \"./ResetButton.css\";\r\n\r\ntype IResetButtonProps = {\r\n  //use handeler function if desired\r\n  handler(): void;\r\n};\r\nconst ResetButton: React.FC<IResetButtonProps> = ({ handler }) => {\r\n  return (\r\n    <button\r\n      id=\"reset\"\r\n      onClick={handler}\r\n      className=\"col-12 bi bi-arrow-repeat\"\r\n    ></button>\r\n  );\r\n};\r\nexport default ResetButton;\r\n","import * as React from \"react\";\r\nimport \"./Timer.css\";\r\n\r\ntype ITimerProps = {\r\n  paused: boolean;\r\n  minutes: number;\r\n  seconds: number;\r\n  name: string;\r\n};\r\n\r\nconst Timer: React.FC<ITimerProps> = ({ paused, name, minutes, seconds }) => {\r\n  const Seconds = seconds.toString().padStart(2, \"0\");\r\n  const Minutes = minutes.toString().padStart(2, \"0\");\r\n\r\n  return (\r\n    <div className=\"card shadow\">\r\n      <div className=\"card-body\">\r\n        <h5 id=\"timer-label\" className=\"card-title text-center\">\r\n          {name}\r\n        </h5>\r\n        <p className=\"card-text text-large text-center\">\r\n          <span id=\"time-left\">\r\n            {Minutes}:{Seconds}\r\n          </span>{\" \"}\r\n          {paused ? \" paused\" : \"\"}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","export default __webpack_public_path__ + \"static/media/mini-tomato.4d4b3422.svg\";","import * as React from \"react\";\r\nimport \"./Title.css\";\r\nimport minitomato from \"../assets/mini-tomato.svg\";\r\n//use reducer tools\r\n\r\ntype ITitleProps = {\r\n  title: string;\r\n  //use handeler function if desired\r\n};\r\nconst Title: React.FC<ITitleProps> = ({ title }) => {\r\n  //use local state\r\n  return (\r\n    <h1 className=\"text-center\">\r\n      {title}\r\n      <img src={minitomato} height=\"75em\" alt=\"\" />\r\n    </h1>\r\n  );\r\n};\r\nexport default Title;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\" +\n              \"version 0.1003\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC, useEffect } from \"react\";\r\n// import { Snackbar, Button } from '@material-ui/core';\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport * as serviceWorkerRegistration from \"../serviceWorkerRegistration\";\r\n\r\nconst ServiceWorkerWrapper: FC = () => {\r\n  const [showReload, setShowReload] = React.useState(false);\r\n\r\n  const [\r\n    waitingWorker,\r\n    setWaitingWorker,\r\n  ] = React.useState<ServiceWorker | null>(null);\r\n\r\n  const onSWUpdate = (registration: ServiceWorkerRegistration) => {\r\n    setShowReload(true);\r\n    setWaitingWorker(registration.waiting);\r\n  };\r\n\r\n  const reloadPage = () => {\r\n    waitingWorker?.postMessage({ type: \"SKIP_WAITING\" });\r\n    setShowReload(false);\r\n    window.location.reload();\r\n  };\r\n\r\n  const { addToast } = useToasts();\r\n\r\n  const notifyUpdate = () => {\r\n    addToast(\r\n      <div role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n        <div className=\"toast-header\">\r\n          <strong className=\"mr-auto\">Update</strong>\r\n          <button\r\n            type=\"button\"\r\n            className=\"ml-2 mb-1 close\"\r\n            data-dismiss=\"toast\"\r\n            aria-label=\"Close\"\r\n            onClick={reloadPage}\r\n          >\r\n            <span aria-hidden=\"true\">Reload</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"toast-body\">A new version is available!</div>\r\n      </div>,\r\n      {\r\n        appearance: \"success\",\r\n        autoDismiss: false,\r\n      }\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    serviceWorkerRegistration.register({ onUpdate: onSWUpdate });\r\n    if (showReload) notifyUpdate(); // serviceWorker.register({ onUpdate: onSWUpdate });\r\n  }, []);\r\n\r\n  return null;\r\n\r\n  // <div className=\"toast\"\r\n  //   open={showReload}\r\n  //   message=\"A new version is available!\"\r\n  //   onClick={reloadPage}\r\n  //   anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n  //   action={\r\n  //     <button\r\n  //       color=\"inherit\"\r\n  //       size=\"small\"\r\n  //       onClick={reloadPage}\r\n  //     >\r\n  //       Reload\r\n  //     </button>\r\n  //   }\r\n  // />\r\n};\r\n\r\nexport default ServiceWorkerWrapper;\r\n","import { FC, useEffect } from \"react\";\r\nimport { useWakeLock } from \"react-screen-wake-lock\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst ScreenWakelocker: FC = () => {\r\n  const { addToast } = useToasts();\r\n  const alertToast = (message: string, released: boolean | undefined) => {\r\n    addToast(\r\n      <div>\r\n        <p>\r\n          {message}\r\n          <br />\r\n          Screen Wake Lock API supported: <b>{`${isSupported}`}</b>\r\n          <br />\r\n          Released: <b>{`${released}`}</b>\r\n        </p>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() =>\r\n            released === false\r\n              ? release()\r\n              : request().then((res) => alertToast(\"ScreenLock active\", false))\r\n          }\r\n        >\r\n          {released === false ? \"Release\" : \"Request\"}\r\n        </button>\r\n      </div>,\r\n      {\r\n        appearance: released === false ? \"success\" : \"error\",\r\n        autoDismiss: released === false ? true : false,\r\n      }\r\n    );\r\n  };\r\n\r\n  const { isSupported, released, request, release } = useWakeLock({\r\n    // onRequest: () => alertToast(\"Screen Wake Lock: requested!\", released),\r\n    onError: () => alertToast(\"An error happened 💥\", released),\r\n    onRelease: () => alertToast(\"Screen Wake Lock: released!\", released),\r\n  });\r\n  // Function that attempts to request a screen wake lock.\r\n  useEffect(() => {\r\n    request().then((res) => alertToast(\"ScreenLock active\", false));\r\n  }, []);\r\n\r\n  return null;\r\n\r\n  //   (\r\n  //     <div>\r\n  //       <p>\r\n  //         Screen Wake Lock API supported: <b>{`${isSupported}`}</b>\r\n  //         <br />\r\n  //         Released: <b>{`${released}`}</b>\r\n  //       </p>\r\n  //       <button\r\n  //         type=\"button\"\r\n  //         onClick={() => (released === false ? release() : request())}\r\n  //       >\r\n  //         {released === false ? \"Release\" : \"Request\"}\r\n  //       </button>\r\n  //     </div>\r\n  //   );\r\n};\r\n\r\nexport default ScreenWakelocker;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n// import * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ServiceWorkerWrapper from \"./components/ServiceWorkerWrapper\";\nimport { ToastProvider } from \"react-toast-notifications\";\nimport ScreenWakelocker from \"./components/ScreenWakeLocker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToastProvider>\n      <ServiceWorkerWrapper />\n      <App />\n      <ScreenWakelocker />\n    </ToastProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n//serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}